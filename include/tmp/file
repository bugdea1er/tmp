#ifndef TMP_FILE_H
#define TMP_FILE_H

#include <tmp/entry>
#include <tmp/export>

#include <filesystem>
#include <fstream>
#include <string>
#include <string_view>

namespace tmp {

/// tmp::file is a smart handle that owns and manages a temporary file and
/// deletes it when this handle goes out of scope
///
/// When a tmp::file object is created, it creates a unique temporary file using
/// the system's default location for temporary files
///
/// The managed file is deleted of when either of the following happens:
/// - the managing tmp::file object is destroyed
/// - the managing tmp::file object is assigned another path via operator=
///
/// tmp::file provides additional `write` and `append` methods
/// which allow writing data to the temporary file
///
/// The following example uses a tmp::file object to create a temporary file
/// and write a string to it; when the function returns, the tmp::file object
/// goes out of scope and the temporary file is deleted:
///
/// @code{.cpp}
///   #include <tmp/file>
///
///   auto func(std::string_view content) {
///     auto tmpfile = tmp::file("org.example.product");
///     tmpfile.write(content);
///
///     // the temporary file is deleted recursively when the
///     // tmp::file object goes out of scope and is destroyed
///   }
/// @endcode
class TMP_EXPORT file final : public entry {
public:
  /// Implementation-defined handle type to the temporary file
#if defined(_WIN32)
  using native_handle_type = void*;    // HANDLE
#elif __has_include(<unistd.h>)
  using native_handle_type = int;    // POSIX file descriptor
#else
#error "Target platfrom not supported"
#endif

  /// Creates a unique temporary file and opens it for reading and writing
  /// in binary mode
  ///
  /// @param label    A label to attach to the temporary file path
  /// @param suffix   A suffix to be used in the temporary file path
  /// @throws std::filesystem::filesystem_error if cannot create a file
  explicit file(std::string_view label = "", std::string_view suffix = "");

  /// Creates a unique temporary file and opens it for reading and writing
  /// in text mode
  ///
  /// @param label    A label to attach to the temporary file path
  /// @param suffix   A suffix to be used in the temporary file path
  /// @throws std::filesystem::filesystem_error if cannot create a file
  static file text(std::string_view label = "", std::string_view suffix = "");

  /// Creates a unique temporary copy from the given path
  ///
  /// @param path   A path to make a temporary copy from
  /// @param label  A label to attach to the temporary file path
  /// @param suffix A suffix to be used in the temporary file path
  /// @returns The new temporary file
  /// @throws std::filesystem::filesystem_error if @p path is not a file
  static file copy(const std::filesystem::path& path,
                   std::string_view label = "", std::string_view suffix = "");

  /// Returns an implementation-defined handle to this file
  /// @returns The underlying implementation-defined handle
  native_handle_type native_handle() const noexcept;

  /// Reads the entire contents of this file
  /// @returns A string with this file contents
  std::string read() const;

  /// Writes the given content to this file discarding any previous content
  /// @param content  A string to write to this file
  void write(std::string_view content) const;

  /// Appends the given content to the end of this file
  /// @param content  A string to append to this file
  void append(std::string_view content) const;

  /// Deletes the managed file if its path is not empty
  ~file() noexcept override;

  file(file&&) noexcept;                   ///< move-constructible
  file& operator=(file&&) noexcept;        ///< move-assignable
  file(const file&) = delete;              ///< not copy-constructible
  auto operator=(const file&) = delete;    ///< not copy-assignable

private:
  /// Implementation-defined handle to the file
  native_handle_type handle;

  /// Whether the managed file is opened in binary write mode
  bool binary;

  /// Creates a unique temporary file and opens it for reading and writing
  /// in the specified mode
  ///
  /// @param label    A label to attach to the temporary file path
  /// @param suffix   A suffix to be used in the temporary file path
  /// @param binary   Whether the managed file is opened in binary write mode
  /// @throws fs::filesystem_error if cannot create a file
  file(std::string_view label, std::string_view suffix, bool binary);

  /// Creates a unique temporary file
  ///
  /// @param handle   A path to the created temporary file and its
  ///                 implementation-defined handle
  /// @param binary   Whether the managed file is opened in binary write mode
  file(std::pair<std::filesystem::path, native_handle_type> handle,
       bool binary) noexcept;
};
}    // namespace tmp

#endif    // TMP_FILE_H
