#ifndef TMP_FILE_H
#define TMP_FILE_H

#include <cstddef>
#include <filesystem>
#include <fstream>
#include <ios>
#include <istream>

#ifdef __GLIBCXX__
#include <ext/stdio_filebuf.h>
#endif

namespace tmp {

/// tmp::file is a smart handle that manages a temporary file, ensuring
/// its deletion when the handle goes out of scope
///
/// Upon creation, a tmp::file object generates a unique temporary file
/// in the current user's temporary directory, opening it for both
/// reading and writing
///
/// The temporary file is deleted of when either of the following happens:
/// - the tmp::file object is destroyed
/// - the tmp::file object is assigned another file using operator=
///
/// tmp::file inherits from the std::iostream class, allowing it to be
/// used seamlessly with standard input/output operations and simplifying file
/// handling while maintaining the flexibility of stream operations
///
/// The example below demonstrates a usage of a tmp::file object to validate
/// a request content and then move it to persistent storage; note that after
/// the move() call, the temporary file will not be deleted, as its ownership
/// is transferred to the specified location:
///
/// @code{.cpp}
///   #include <tmp/file>
///
///   auto func(std::string_view content) {
///     auto tmpfile = tmp::file(std::ios::binary);
///     tmpfile << contents << std::flush;
///     if (validate(tmpfile)) {
///       // Save the file to the persistent storage
///       tmpfile.move(storage / "new_file");
///     } else {
///       // The file is deleted automatically
///       throw InvalidRequestError();
///     }
///   }
/// @endcode
class file : public std::iostream {
public:
  /// Implementation-defined handle type to the file
#if defined(_WIN32)
  using native_handle_type = void*;    // HANDLE
#elif __has_include(<unistd.h>)
  using native_handle_type = int;    // POSIX file descriptor
#else
#error "Target platform not supported"
#endif

  /// Creates a unique file in the current user's temporary directory
  /// and opens it with `mode | std::ios::in | std::ios::out`
  /// @param mode The file opening mode
  /// @throws std::filesystem::filesystem_error if cannot create a file
  /// @throws std::invalid_argument if the given open mode is invalid
  explicit file(std::ios::openmode mode = std::ios::in | std::ios::out);

  /// Creates a unique temporary copy from the given path
  /// and opens it with `mode | std::ios::in | std::ios::out`
  /// @note after creating a copy, its I/O position indicator points to the end
  /// @param path A path to make a temporary copy from
  /// @param mode The file opening mode
  /// @returns The new temporary file
  /// @throws std::filesystem::filesystem_error if cannot create a copy
  /// @throws std::invalid_argument if the given open mode is invalid
  static file copy(const std::filesystem::path& path,
                   std::ios::openmode mode = std::ios::in | std::ios::out);

  /// Returns an implementation-defined handle to this file
  /// @returns The underlying implementation-defined handle
  native_handle_type native_handle() const noexcept;

  /// Links this file to the given path if it is on the same filesystem,
  /// or copies it otherwise
  /// @param to The target path
  /// @throws std::filesystem::filesystem_error if cannot move the file
  void move(const std::filesystem::path& to);

  /// Closes and deletes this file
  ~file() noexcept override;

  file(file&&) noexcept;                    ///< MoveConstructible
  file& operator=(file&&);                  ///< MoveAssignable
  file(const file&) = delete;               ///< not CopyConstructible
  file& operator=(const file&) = delete;    ///< not CopyAssignable

private:
#if defined(__GLIBCXX__)
  // In GNU libstdc++ we can just use the `__gnu_cxx::stdio_filebuf` extension,
  // which has everything we need

  /// The underlying raw file device object
  mutable __gnu_cxx::stdio_filebuf<char> sb;
#elif defined(_LIBCPP_VERSION)
  // In LLVM libc++ we use the public `std::filebuf::__open` method
  // and save a native handle to return in `file::native_handle()`

  /// The underlying native handle to the file
  int handle;

  /// The underlying raw file device object
  std::filebuf sb;
#elif defined(_MSC_VER)
  // In Microsoft STL we use the `std::filebuf::filebuf(std::FILE*)`
  // extension and save a pointer to that file to close it ourselves

  /// The underlying C file stream
  std::unique_ptr<std::FILE, decltype(&std::fclose)> underlying;

  /// The underlying raw file device object
  std::filebuf sb;
#else
#error "Target platform not supported"
#endif
};
}    // namespace tmp

/// The template specialization of `std::hash` for `tmp::file`
template<> struct std::hash<tmp::file> {
  std::size_t operator()(const tmp::file& file) const noexcept {
    return std::hash<tmp::file::native_handle_type>()(file.native_handle());
  }
};

#endif    // TMP_FILE_H
