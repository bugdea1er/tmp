#ifndef TMP_FILE_H
#define TMP_FILE_H

#include <tmp/entry>
#include <tmp/export>

#include <filesystem>
#include <fstream>
#include <istream>
#include <string_view>

namespace tmp {

/// tmp::file is a smart handle that owns and manages a temporary file and
/// deletes it when this handle goes out of scope
///
/// When a tmp::file object is created, it creates a unique temporary file using
/// the system's default location for temporary files and opens it for reading
/// and writing
///
/// The managed file is deleted of when either of the following happens:
/// - the managing tmp::file object is destroyed
/// - the managing tmp::file object is assigned another path via operator=
///
/// The following example uses a tmp::file object to create a temporary file
/// and write a string to it; when the function returns, the tmp::file object
/// goes out of scope and the temporary file is deleted:
///
/// @code{.cpp}
///   #include <tmp/file>
///
///   auto func(std::string_view content) {
///     auto tmpfile = tmp::file("org.example.product", ".txt");
///     tmpfile.write(content);
///
///     // the temporary file is deleted recursively when the
///     // tmp::file object goes out of scope and is destroyed
///   }
/// @endcode
class TMP_EXPORT file : public entry, public std::iostream {
public:
  /// Creates a unique temporary file and opens it for reading and writing
  /// in binary mode
  /// @param[in] label     A label to attach to the temporary file path
  /// @param[in] extension An extension of the temporary file path
  /// @throws std::filesystem::filesystem_error if cannot create a file
  /// @throws std::invalid_argument             if arguments are ill-formatted
  explicit file(std::string_view label = "", std::string_view extension = "");

  /// Creates a unique temporary file and opens it for reading and writing
  /// in binary mode
  /// @param[out] ec Parameter for error reporting
  explicit file(std::error_code& ec);

  /// Creates a unique temporary file and opens it for reading and writing
  /// in binary mode
  /// @param[in]  label A label to attach to the temporary file path
  /// @param[out] ec    Parameter for error reporting
  file(std::string_view label, std::error_code& ec);

  /// Creates a unique temporary file and opens it for reading and writing
  /// in binary mode
  /// @param[in]  label     A label to attach to the temporary file path
  /// @param[in]  extension An extension of the temporary file path
  /// @param[out] ec        Parameter for error reporting
  file(std::string_view label, std::string_view extension, std::error_code& ec);

  /// Creates a unique temporary file and opens it for reading and writing
  /// in text mode
  /// @param label     A label to attach to the temporary file path
  /// @param extension An extension of the temporary file path
  /// @throws std::filesystem::filesystem_error if cannot create a file
  /// @throws std::invalid_argument             if arguments are ill-formatted
  static file text(std::string_view label = "",
                   std::string_view extension = "");

  /// Creates a unique temporary file and opens it for reading and writing
  /// in text mode
  /// @param[out] ec Parameter for error reporting
  static file text(std::error_code& ec);

  /// Creates a unique temporary file and opens it for reading and writing
  /// in text mode
  /// @param[in]  label A label to attach to the temporary file path
  /// @param[out] ec    Parameter for error reporting
  static file text(std::string_view label, std::error_code& ec);

  /// Creates a unique temporary file and opens it for reading and writing
  /// in text mode
  /// @param[in]  label     A label to attach to the temporary file path
  /// @param[in]  extension An extension of the temporary file path
  /// @param[out] ec        Parameter for error reporting
  static file text(std::string_view label, std::string_view extension,
                   std::error_code& ec);

  /// Creates a unique temporary copy from the given path
  /// @param path      A path to make a temporary copy from
  /// @param label     A label to attach to the temporary file path
  /// @param extension An extension of the temporary file path
  /// @returns The new temporary file
  /// @throws std::filesystem::filesystem_error if given path is not a file
  /// @throws std::invalid_argument             if arguments are ill-formatted
  static file copy(const std::filesystem::path& path,
                   std::string_view label = "",
                   std::string_view extension = "");

  /// Moves the managed path recursively to a given target, releasing
  /// ownership of the managed path; behaves like `std::filesystem::rename`
  /// even when moving between filesystems
  /// @note The target path parent is created when this function is called
  /// @param[in] to A path to the target file or directory
  /// @throws std::filesystem::filesystem_error if cannot move the owned path
  void move(const std::filesystem::path& to);

  /// Moves the managed path recursively to a given target, releasing
  /// ownership of the managed path; behaves like `std::filesystem::rename`
  /// even when moving between filesystems
  /// @note The target path parent is created when this function is called
  /// @param[in]  to A path to the target file or directory
  /// @param[out] ec Parameter for error reporting
  void move(const std::filesystem::path& to, std::error_code& ec);

  /// Deletes and closes the managed file
  ~file() noexcept override;

  file(file&&);                             ///< MoveConstructible
  file& operator=(file&&);                  ///< MoveAssignable
  file(const file&) = delete;               ///< not CopyConstructible
  file& operator=(const file&) = delete;    ///< not CopyAssignable

private:
  /// The underlying raw file device object
  std::filebuf filebuf;

  /// Creates a unique temporary file
  /// @param handle    A path to the created temporary file and a handle to it
  explicit file(std::pair<std::filesystem::path, std::filebuf> handle) noexcept
      TMP_NO_EXPORT;
};
}    // namespace tmp

/// The template specialization of `std::hash` for `tmp::file`
template<> struct std::hash<tmp::file> : std::hash<tmp::entry> {};

#endif    // TMP_FILE_H
