#ifndef TMP_FILE_H
#define TMP_FILE_H

#include <cstddef>
#include <filesystem>
#include <fstream>
#include <ios>
#include <istream>

#ifdef __GLIBCXX__
#include <ext/stdio_filebuf.h>
#endif

namespace tmp {

/// tmp::file is a smart handle that manages a binary temporary file, ensuring
/// its deletion when the handle goes out of scope
///
/// Upon creation, a tmp::file object generates a unique temporary file,
/// opening it for reading and writing in binary format
///
/// The temporary file is deleted of when either of the following happens:
/// - the tmp::file object is destroyed
/// - the tmp::file object is assigned another file using operator=
///
/// tmp::file inherits from the std::iostream class, allowing it to be
/// used seamlessly with standard input/output operations and simplifying file
/// handling while maintaining the flexibility of stream operations
///
/// The example below demonstrates a usage of a `tmp::file` object to validate
/// a request content and then unarchive it to persistent storage:
///
/// @code{.cpp}
///   #include <tmp/file>
///
///   auto func(std::string_view content) {
///     auto tmpfile = tmp::file();
///     tmpfile << contents << std::flush;
///     if (validate(tmpfile)) {
///       // Unarchive the file to the persistent storage
///       archive::unzip(tmpfile, storage);
///     } else {
///       // The file is deleted automatically
///       throw InvalidRequestError();
///     }
///   }
/// @endcode
class file : public std::iostream {
public:
  /// Implementation-defined handle type to the file
#if defined(_WIN32)
  using native_handle_type = void*;    // HANDLE
#elif __has_include(<unistd.h>)
  using native_handle_type = int;    // POSIX file descriptor
#else
#error "Target platform not supported"
#endif

  /// Creates and opens a binary temporary file as if by POSIX `tmpfile`
  /// @throws std::filesystem::filesystem_error if cannot create a file
  explicit file();

  /// Returns an implementation-defined handle to this file
  /// @returns The underlying implementation-defined handle
  native_handle_type native_handle() const noexcept;

  /// Closes and deletes this file
  ~file() noexcept override;

  file(file&&) noexcept;                    ///< MoveConstructible
  file& operator=(file&&);                  ///< MoveAssignable
  file(const file&) = delete;               ///< not CopyConstructible
  file& operator=(const file&) = delete;    ///< not CopyAssignable

private:
  /// The underlying C file stream
  std::unique_ptr<std::FILE, int (*)(std::FILE*)> underlying;

#ifdef __GLIBCXX__
  /// The underlying raw file device object
  mutable __gnu_cxx::stdio_filebuf<char> sb;
#else
  /// The underlying raw file device object
  std::filebuf sb;
#endif
};
}    // namespace tmp

#endif    // TMP_FILE_H
