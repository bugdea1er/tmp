#ifndef TMP_ENTRY_H
#define TMP_ENTRY_H

#include <tmp/export>

#include <cstddef>
#include <filesystem>

namespace tmp {

/// tmp::entry is a smart handle that owns and manages a temporary path and
/// deletes it recursively when this handle goes out of scope
///
/// The managed path is deleted of when either of the following happens:
/// - the managing tmp::entry object is destroyed
/// - the managing tmp::entry object is assigned another path via operator=
///
/// Subclasses should provide a path to manage for this class;
/// any opening or closing operations should be managed by subclasses
class TMP_EXPORT entry {
public:
  /// Returns the managed path
  /// @returns The full path this entry manages
  operator const std::filesystem::path&() const noexcept;

  /// Returns the managed path
  /// @returns The full path this entry manages
  const std::filesystem::path& path() const noexcept;

  /// Moves the managed path recursively to a given target, releasing
  /// ownership of the managed path
  /// @note The target path parent is created when this function is called
  /// @param to        A path to the target file or directory
  /// @throws std::filesystem::filesystem_error if cannot move the owned path
  void move(const std::filesystem::path& to);

  /// Deletes the managed path recursively
  virtual ~entry() noexcept;

  entry(const entry&) = delete;             ///< not copy-constructible
  auto operator=(const entry&) = delete;    ///< not copy-assignable

  /// Checks whether lhs and rhs are equal
  friend bool operator==(const entry&, const entry&) noexcept TMP_EXPORT;

  /// Checks whether lhs and rhs are not equal
  friend bool operator!=(const entry&, const entry&) noexcept TMP_EXPORT;

  /// Checks whether lhs is less than rhs
  friend bool operator<(const entry&, const entry&) noexcept TMP_EXPORT;

  /// Checks whether lhs is less than or equal to rhs
  friend bool operator<=(const entry&, const entry&) noexcept TMP_EXPORT;

  /// Checks whether lhs is greater than rhs
  friend bool operator>(const entry&, const entry&) noexcept TMP_EXPORT;

  /// Checks whether lhs is greater than or equal to rhs
  friend bool operator>=(const entry&, const entry&) noexcept TMP_EXPORT;

protected:
  /// Creates a temporary entry which owns the given path
  /// @param path      A path to manage
  explicit entry(std::filesystem::path path);

  entry(entry&&) noexcept;               ///< move-constructible
  entry& operator=(entry&&) noexcept;    ///< move-assignable

private:
  /// The managed path
  std::filesystem::path pathobject;

  /// Releases the ownership of the managed path
  /// @note the destructor will not delete the managed path after the call
  /// @returns The full path this entry manages
  std::filesystem::path release() noexcept TMP_NO_EXPORT;
};
}    // namespace tmp

/// The template specialization of `std::hash` for `tmp::entry`
template <> struct TMP_EXPORT std::hash<tmp::entry> {
  std::size_t operator()(const tmp::entry& entry) const noexcept;
};

#endif    // TMP_ENTRY_H
