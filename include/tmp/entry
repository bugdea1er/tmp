#ifndef TMP_ENTRY_H
#define TMP_ENTRY_H

#include <tmp/export>

#include <cstddef>
#include <filesystem>
#include <system_error>
#include <utility>

namespace tmp {

/// tmp::entry is a smart handle that owns and manages a temporary path and
/// deletes it recursively when this handle goes out of scope
///
/// The managed path is deleted of when either of the following happens:
/// - the managing tmp::entry object is destroyed
/// - the managing tmp::entry object is assigned another path via operator=
///
/// Subclasses should provide a path to manage for this class;
/// any opening or closing operations should be managed by subclasses
class TMP_EXPORT entry {
public:
  /// Returns the managed path
  /// @returns The full path this entry manages
  operator const std::filesystem::path&() const noexcept;

  /// Returns the managed path
  /// @returns The full path this entry manages
  const std::filesystem::path& path() const noexcept;

  /// Moves the managed path recursively to a given target, releasing
  /// ownership of the managed path; behaves like `std::filesystem::rename`
  /// even when moving between filesystems
  /// @note The target path parent is created when this function is called
  /// @param[in] to A path to the target file or directory
  /// @throws std::filesystem::filesystem_error if cannot move the owned path
  void move(const std::filesystem::path& to);

  /// Moves the managed path recursively to a given target, releasing
  /// ownership of the managed path; behaves like `std::filesystem::rename`
  /// even when moving between filesystems
  /// @note The target path parent is created when this function is called
  /// @param[in]  to A path to the target file or directory
  /// @param[out] ec Parameter for error reporting
  void move(const std::filesystem::path& to, std::error_code& ec);

  /// Deletes the managed path recursively
  virtual ~entry() noexcept;

  entry(const entry&) = delete;               ///< not CopyConstructible
  entry& operator=(const entry&) = delete;    ///< not CopyAssignable

  bool operator==(const entry& rhs) const noexcept;    ///< EqualityComparable
  bool operator!=(const entry& rhs) const noexcept;
  bool operator<(const entry& rhs) const noexcept;    ///< LessThanComparable
  bool operator>(const entry& rhs) const noexcept;
  bool operator<=(const entry& rhs) const noexcept;
  bool operator>=(const entry& rhs) const noexcept;

protected:
  /// Creates a temporary entry which owns the given path
  /// @param[in] path A path to manage
  explicit entry(std::filesystem::path path) noexcept;

  entry(entry&&) noexcept;               ///< MoveConstructible
  entry& operator=(entry&&) noexcept;    ///< MoveAssignable

private:
  /// The managed path
  std::filesystem::path pathobject;
};
}    // namespace tmp

/// The template specialization of `std::hash` for `tmp::entry`
template<> struct TMP_EXPORT std::hash<tmp::entry> {
  std::size_t operator()(const tmp::entry& entry) const noexcept;
};

#endif    // TMP_ENTRY_H
