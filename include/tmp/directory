// -*- C++ -*-
//
// Copyright (c) 2024 â€“ present, Ilya Andreev
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#ifndef TMP_DIRECTORY_H
#define TMP_DIRECTORY_H

#include <tmp/file>

#include <cstddef>
#include <filesystem>
#include <string_view>

namespace tmp {

/// tmp::directory is a smart handle that manages a temporary directory,
/// ensuring its recursive deletion when the handle goes out of scope
///
/// When a tmp::directory object is created, it generates a unique temporary
/// directory in the current user's temporary directory
///
/// The temporary directory is deleted when either of the following happens:
/// - the tmp::directory object is destroyed
/// - the tmp::directory object is assigned another directory using operator=
///
/// The example below demonstrates a usage of a tmp::directory object to run
/// a subprocess within it and archive its logs; when the function
/// returns, the temporary directory is recursively deleted:
///
/// @code{.cpp}
///   #include <tmp/directory>
///
///   auto func() {
///     auto tmpdir = tmp::directory("org.example.product");
///     process::exec(executable, args, tmpdir);
///
///     return archive::glob(tmpdir, "*.log");
///
///     // The temporary directory is deleted recursively when the
///     // tmp::directory object goes out of scope
///   }
/// @endcode
class directory {
public:
  /// Creates a unique directory in the current user's temporary directory
  /// @param prefix A prefix to add to the temporary directory name
  /// @throws std::filesystem::filesystem_error if cannot create a directory
  /// @throws std::invalid_argument if the prefix contains a directory separator
  explicit directory(std::string_view prefix = "");

  /// Returns the path of this directory
  /// @returns The full path of this directory
  operator const std::filesystem::path&() const noexcept;

  /// Returns the path of this directory
  /// @returns The full path of this directory
  const std::filesystem::path& path() const noexcept;

  /// Concatenates this directory path with a given path name
  /// @param source A path name
  /// @returns The result of path concatenation
  std::filesystem::path operator/(const std::filesystem::path& source) const;

  /// Deletes this directory recursively
  ~directory() noexcept;

  directory(directory&&) noexcept;
  directory& operator=(directory&&) noexcept;
  directory(const directory&) = delete;
  directory& operator=(const directory&) = delete;

private:
  /// This directory path
  std::filesystem::path pathobject;

  /// Implementation-defined handle to this directory
  file::native_handle_type handle;
};
}    // namespace tmp

#endif    // TMP_DIRECTORY_H
