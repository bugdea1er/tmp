#ifndef TMP_DIRECTORY_H
#define TMP_DIRECTORY_H

#include <tmp/file>

#include <cstddef>
#include <filesystem>
#include <string_view>

namespace tmp {

/// tmp::directory is a smart handle that manages a temporary directory,
/// ensuring its recursive deletion when the handle goes out of scope
///
/// When a tmp::directory object is created, it generates a unique temporary
/// directory in the current user's temporary directory
///
/// The temporary directory is deleted when either of the following happens:
/// - the tmp::directory object is destroyed
/// - the tmp::directory object is assigned another directory using operator=
///
/// The example below demonstrates a usage of a tmp::directory object to run
/// a subprocess within it and archive its logs; when the function
/// returns, the temporary directory is recursively deleted:
///
/// @code{.cpp}
///   #include <tmp/directory>
///
///   auto func() {
///     auto tmpdir = tmp::directory("org.example.product");
///     process::exec(executable, args, tmpdir);
///
///     return archive::glob(tmpdir, "*.log");
///
///     // The temporary directory is deleted recursively when the
///     // tmp::directory object goes out of scope
///   }
/// @endcode
class directory {
public:
  /// Creates a unique directory in the current user's temporary directory
  /// @param prefix A prefix to add to the temporary directory name
  /// @throws std::filesystem::filesystem_error if cannot create a directory
  /// @throws std::invalid_argument if the prefix contains a directory separator
  explicit directory(std::string_view prefix = "");

  /// Creates a unique temporary copy recursively from the given directory path
  /// @param path   A path to make a temporary copy from
  /// @param prefix A prefix to add to the temporary directory name
  /// @returns The new temporary directory
  /// @throws std::filesystem::filesystem_error if cannot create a copy
  /// @throws std::invalid_argument if the prefix contains a directory separator
  static directory copy(const std::filesystem::path& path,
                        std::string_view prefix = "");

  /// Returns the path of this directory
  /// @returns The full path of this directory
  operator const std::filesystem::path&() const noexcept;

  /// Returns the path of this directory
  /// @returns The full path of this directory
  const std::filesystem::path& path() const noexcept;

  /// Concatenates this directory path with a given path name
  /// @param source A path name
  /// @returns The result of path concatenation
  std::filesystem::path operator/(const std::filesystem::path& source) const;

  /// Deletes this directory recursively
  ~directory() noexcept;

  directory(directory&&) noexcept;                    ///< MoveConstructible
  directory& operator=(directory&&) noexcept;         ///< MoveAssignable
  directory(const directory&) = delete;               ///< not CopyConstructible
  directory& operator=(const directory&) = delete;    ///< not CopyAssignable

private:
  /// This directory path
  std::filesystem::path pathobject;

  /// Memory reserved for future use
  file::native_handle_type reserved;
};
}    // namespace tmp

/// The template specialization of `std::hash` for `tmp::directory`
template<> struct std::hash<tmp::directory> {
  std::size_t operator()(const tmp::directory& directory) const noexcept {
    // `std::hash<std::filesystem::path>` was not included in the C++17 standard
    return filesystem::hash_value(directory);
  }
};

#endif    // TMP_DIRECTORY_H
