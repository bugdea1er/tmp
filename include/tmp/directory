#ifndef TMP_DIRECTORY_H
#define TMP_DIRECTORY_H

#include <tmp/file>

#include <cstddef>
#include <filesystem>
#include <string_view>

namespace tmp {

/// `tmp::directory` is a smart handle that owns and manages a temporary
/// directory and deletes it recursively when this handle goes out of scope
///
/// When a `tmp::directory` object is created, it creates a unique temporary
/// directory in the current user's temporary directory
///
/// The managed directory is deleted of when either of the following happens:
/// - the managing `tmp::directory` object is destroyed
/// - the managing `tmp::directory` object is assigned another path
///   via `operator=`
///
/// The following example uses a `tmp::directory` object to create a temporary
/// directory; when the function returns, the `tmp::directory` object goes out
/// of scope and the temporary directory is recursively deleted:
///
/// @code{.cpp}
///   #include <tmp/directory>
///
///   auto func() {
///     auto tmpdir = tmp::directory("org.example.product");
///     std::ostream(tmpdir / "file.txt") << "Hello, world!";
///
///     // the temporary directory is deleted recursively when the
///     // `tmp::directory` object goes out of scope and is destroyed
///   }
/// @endcode
class directory {
public:
  /// Creates a unique directory in the current user's temporary directory
  /// @param prefix A prefix to add to the temporary directory name
  /// @throws std::filesystem::filesystem_error if cannot create a directory
  /// @throws std::invalid_argument if the prefix contains a directory separator
  explicit directory(std::string_view prefix = "");

  /// Creates a unique temporary copy recursively from the given directory path
  /// @param path   A path to make a temporary copy from
  /// @param prefix A prefix to add to the temporary directory name
  /// @returns The new temporary directory
  /// @throws std::filesystem::filesystem_error if cannot create a copy
  /// @throws std::invalid_argument if the prefix contains a directory separator
  static directory copy(const std::filesystem::path& path,
                        std::string_view prefix = "");

  /// Returns the path of this directory
  /// @returns The full path of this directory
  operator const std::filesystem::path&() const noexcept;

  /// Returns the path of this directory
  /// @returns The full path of this directory
  const std::filesystem::path& path() const noexcept;

  /// Concatenates this directory path with a given path name
  /// @param source A path name
  /// @returns The result of path concatenation
  std::filesystem::path operator/(const std::filesystem::path& source) const;

  /// Moves this directory recursively to the given path, releasing
  /// ownership of the directory, as if by `std::filesystem::rename`
  /// even when moving between filesystems
  /// @param to The target path
  /// @throws std::filesystem::filesystem_error if cannot move the directory
  void move(const std::filesystem::path& to);

  /// Deletes this directory recursively
  ~directory() noexcept;

  directory(directory&&) noexcept;                    ///< MoveConstructible
  directory& operator=(directory&&);                  ///< MoveAssignable
  directory(const directory&) = delete;               ///< not CopyConstructible
  directory& operator=(const directory&) = delete;    ///< not CopyAssignable

private:
  /// This directory path
  std::filesystem::path pathobject;

  /// Memory reserved for future use
  file::native_handle_type reserved;
};
}    // namespace tmp

/// The template specialization of `std::hash` for `tmp::directory`
template<> struct std::hash<tmp::directory> {
  std::size_t operator()(const tmp::directory& directory) const noexcept {
    // `std::hash<std::filesystem::path>` was not included in the C++17 standard
    return filesystem::hash_value(directory);
  }
};

#endif    // TMP_DIRECTORY_H
