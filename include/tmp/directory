#ifndef TMP_DIRECTORY_H
#define TMP_DIRECTORY_H

#include <tmp/entry>
#include <tmp/export>

#include <filesystem>
#include <string_view>

namespace tmp {

/// `tmp::directory` is a smart handle that owns and manages a temporary
/// directory and deletes it recursively when this handle goes out of scope
///
/// When a `tmp::directory` object is created, it creates a unique temporary
/// directory using the system default location for temporary files
///
/// The managed directory is deleted of when either of the following happens:
/// - the managing `tmp::directory` object is destroyed
/// - the managing `tmp::directory` object is assigned another path
///   via `operator=`
///
/// The following example uses a `tmp::directory` object to create a temporary
/// directory; when the function returns, the `tmp::directory` object goes out
/// of scope and the temporary directory is recursively deleted:
///
/// @code{.cpp}
///   #include <tmp/directory>
///
///   auto func() {
///     auto tmpdir = tmp::directory("org.example.product");
///     std::ostream(tmpdir / "file.txt") << "Hello, world!";
///
///     // the temporary directory is deleted recursively when the
///     // `tmp::directory` object goes out of scope and is destroyed
///   }
/// @endcode
class TMP_EXPORT directory : public entry {
public:
  /// Creates a unique temporary directory
  /// @param prefix A prefix to attach to the temporary directory path
  /// @throws std::filesystem::filesystem_error if cannot create a directory
  /// @throws std::invalid_argument             if the prefix is ill-formatted
  explicit directory(std::string_view prefix = "");

  /// Creates a unique temporary copy recursively from the given path
  /// @param path   A path to make a temporary copy from
  /// @param prefix A prefix to attach to the temporary directory path
  /// @returns The new temporary directory
  /// @throws std::filesystem::filesystem_error if given path is not a directory
  /// @throws std::invalid_argument             if the prefix is ill-formatted
  static directory copy(const std::filesystem::path& path,
                        std::string_view prefix = "");

  /// Concatenates this directory path with a given source
  /// @param source A string which represents a path name
  /// @returns The result of path concatenation
  std::filesystem::path operator/(std::string_view source) const;

  /// Moves the managed directory recursively to a given target, releasing
  /// ownership of the managed directory; behaves like `std::filesystem::rename`
  /// even when moving between filesystems
  /// @param to A path to the target directory
  /// @throws std::filesystem::filesystem_error if cannot move the owned path
  void move(const std::filesystem::path& to);

  /// Deletes the managed directory recursively
  ~directory() noexcept override;

  directory(directory&&) noexcept;                    ///< MoveConstructible
  directory& operator=(directory&&) noexcept;         ///< MoveAssignable
  directory(const directory&) = delete;               ///< not CopyConstructible
  directory& operator=(const directory&) = delete;    ///< not CopyAssignable
};
}    // namespace tmp

/// The template specialization of `std::hash` for `tmp::directory`
template<> struct std::hash<tmp::directory> : std::hash<tmp::entry> {};

#endif    // TMP_DIRECTORY_H
