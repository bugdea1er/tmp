#ifndef TMP_FILEBUF_H
#define TMP_FILEBUF_H

#include <fstream>
#include <ios>

namespace tmp {

/// `tmp::basic_filebuf` is a stream buffer whose associated character sequence
/// is a file; both the input and the output sequences are associated with
/// the same file, and a joint file position is maintained for both operations
///
/// The reason we implement this here rather than using the standard
/// `std::filebuf` is that the standard does not provide a way to use
/// an existing open file in a file buffer, and does not even report errors when
/// opening a file fails
class filebuf : public std::filebuf {
public:
  /// Implementation-defined handle type to the open file
#if defined(_WIN32)
  using open_handle_type = std::FILE*;
#elif __has_include(<unistd.h>)
  using open_handle_type = int;    // POSIX file descriptor
#else
#error "Target platform not supported"
#endif

  /// Implementation-defined handle type to the file
#if defined(_WIN32)
  using native_handle_type = void*;    // HANDLE
#elif __has_include(<unistd.h>)
  using native_handle_type = int;    // POSIX file descriptor
#else
#error "Target platform not supported"
#endif

  /// Creates a file buffer that is not associated with any file
  filebuf() noexcept;

  /// Opens a file and configures it as the associated character sequence
  /// @param handle A handle to the open file
  /// @param mode   The file opening mode
  /// @returns `this` file buffer, or a null pointer on failure
  filebuf* open(open_handle_type handle, std::ios::openmode mode);

  /// Returns an implementation-defined handle to this file
  /// @returns The underlying implementation-defined handle
  native_handle_type native_handle() const noexcept;

private:
  /// Native handle to the open file
  open_handle_type handle;
};
}    // namespace tmp

#endif    // TMP_FILEBUF_H
