#pragma once

#include <tmp/fs>

#include <filesystem>
#include <string_view>

namespace tmp {

/// tmp::path is a smart handle that owns and manages a temporary path and
/// deletes it recursively when this handle goes out of scope
///
/// The managed path is deleted of when either of the following happens:
/// - the managing tmp::path object is destroyed
/// - the managing tmp::path object is assigned another path via operator=
class path {
    /// The managed path
    fs::path underlying;

public:
    /// Returns the managed path
    operator const fs::path&() const noexcept;

    /// Dereferences the managed path
    /// @returns A pointer to the path owned by *this
    const fs::path* operator->() const noexcept;

    /// Releases the ownership of the managed path;
    /// the destructor will not delete the managed path after the call
    /// @returns The managed path
    fs::path release() noexcept;

    /// Moves the managed path recursively to a given target, releasing
    /// ownership of the managed path
    ///
    /// The parent of the target path is created when this function is called
    /// @param to   A path to the target file or directory
    /// @throws fs::filesystem_error if cannot move the owned path
    void move(const fs::path& to);

    /// Deletes the managed path recursively if it is not empty
    virtual ~path() noexcept;

    path(path&&) noexcept;                   ///< move-constructible
    path& operator=(path&&) noexcept;        ///< move-assignable
    path(const path&) = delete;              ///< not copy-constructible
    auto operator=(const path&) = delete;    ///< not copy-assignable

protected:
    /// Constructs a tmp::path which owns @p path
    /// @param path A path to manage
    explicit path(fs::path path);
};
}    // namespace tmp
